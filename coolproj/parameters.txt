[
  {
    "BTTWidgetName": "Kashi",
    "BTTTriggerType": 642,
    "BTTTriggerTypeDescription": "Shell Script \/ Task Widget",
    "BTTTriggerClass": "BTTTriggerTypeTouchBar",
    "BTTPredefinedActionType": -1,
    "BTTPredefinedActionName": "No Action",
    "BTTShellScriptWidgetGestureConfig": "\/Library/Frameworks/Python.framework/Versions/3.12/bin/python3:::-c:::-:::\/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages",
    "BTTEnabled2": 1,
    "BTTUUID": "",
    "BTTNotesInsteadOfDescription": 0,
    "BTTEnabled": 1,
    "BTTModifierMode": 0,
    "BTTOrder": 9,
    "BTTDisplayOrder": 0,
    "BTTMergeIntoTouchBarGroups": 0,
    "BTTTriggerConfig": {
      "BTTTouchBarHideRecentlyUsedEmoji": false,
      "BTTTouchBarOnlyShowIcon": false,
      "BTTTouchBarFreeSpaceAfterButton": 0,
      "BTTTouchBarBringPlayerToFront": 0,
      "BTTTouchBarHideCover": 0,
      "BTTTouchBarButtonColor": "0.000000, 0.000000, 0.000000, 255.000000",
      "BTTTouchBarApplyCornerRadiusTo": 1,
      "BTTTouchBarItemPlacement": 0,
      "BTTTouchBarAppleScriptStringRunOnInit": true,
      "BTTTouchBarFontColorAlternate": "0.000000, 0.000000, 0.000000, 255.000000",
      "BTTTouchBarEmojiHideBackButton": false,
      "BTTTouchBarHideWhenPaused": 0,
      "BTTTouchBarAlwaysShowButton": false,
      "BTTTouchBarButtonWidth": 100,
      "BTTTouchBarScriptUpdateInterval": 15,
      "BTTTouchBarItemIconHeight": 22,
      "BTTTouchBarBatteryHideOnCharging": false,
      "BTTTouchBarButtonTextAlignment": 0,
      "BTTTouchBarAlternateBackgroundColor": "0.000000, 0.000000, 0.000000, 255.000000",
      "BTTTBWidgetWidth": 400,
      "BTTTouchBarDefaultPlayer": 0,
      "BTTTouchBarItemIconWidth": 22,
      "BTTTouchBarShellScriptString": "import re\nimport requests\nimport json\nimport osascript\nimport hashlib\nfrom bs4 import BeautifulSoup\nfrom io import open\n\n\ndef main():\n    code, output, err = getBrowserAndPlayerData()\n    # print(output,err)\n    current_data = output.split(', ')\n    # Separate output\n    player_data = current_data[0:4]\n    browser_data = current_data[4:]\n    # Process player and browser data\n    player_type, player_artist, player_song, player_state = processPlayerData(\n        player_data)\n    browser_type, browser_artist, browser_song, browser_state = processBrowserData(\n        browser_data)\n    # Determine priority, player or browser\n    priority = (playerOrBrowser(\n        player_type, player_state, browser_type, browser_state))\n    # print(priority)\n    if priority == \"player\":\n        artist = player_artist\n        song = player_song\n    elif priority == \"browser\":\n        artist = browser_artist\n        song = browser_song\n    else:\n        return\n    # Remove extra information from title\n    song = cleanSong(song)\n    artist_1, artist_2 = multipleArtistCheck(artist)\n    # Prepare array of artists\n    artist_array = [artist, artist_1, artist_2]\n    # print('\\nPlayer Full Artist: ' + player_artist + '\\nPlayer Artist 1: ' + player_artist_1 + '\\nPlayer Artist 2: ' + player_artist_2 + '\\nPlayer Song: ' + player_song)\n    # Access Genius API 'https:\/\/docs.genius.com'\n    accesstoken = 'ORYExHGED-rUDNu6wEqCt42NCg9nFuBiCiVKAYkjSrS6aQ1RHdyyjp5gl7GlpXZH'\n    headers = {'Authorization': 'Bearer ' + accesstoken, 'User-Agent': 'Kashi',\n               'Accept': 'application\/json', 'Host': 'api.genius.com'}\n    params = {'q': artist + ' ' + song}\n    hits = requests.get('https:\/\/api.genius.com\/search',\n                        params=params, headers=headers).json()['response']['hits']\n    # for hit in hits:\n    #     print (\"Artist: \" + hit['result']['primary_artist']['name'] + \"\\nSong: \" + hit['result']['full_title'])\n    hitcount = 0\n    if len(hits) > 0:\n        # Get info from top search hit that contains player artist\n        while hitcount < len(hits) - 1 and not any([x in hits[hitcount]['result']['primary_artist']['name'].lower() for x in artist_array]):\n            hitcount += 1                                           # Go to next hit\n        genius_artist = hits[hitcount]['result']['primary_artist']['name'].lower(\n        )\n        genius_song = hits[hitcount]['result']['full_title'].lower()\n        genius_url = hits[hitcount]['result']['url']\n        # print('\\nGenius Artist: ' + genius_artist + '\\nGenius Song: ' + genius_song + '\\nGenius URL: ' + genius_url + '\\n')\n        if any([y in genius_artist for y in artist_array]):\n            # Parse Genius HTML with BeautifulSoup and format lyrics\n            lyrics = parseAndFormat(genius_url)\n            # FINAL STEP: Print to touch bar\n            print(lyrics)\n        else:\n            # Print music quote if lyrics not found\n            printWisdom(song)\n    else:\n        printWisdom(song)\n    return\n\n\ndef getBrowserAndPlayerData():\n    applescript = '''\n    on run\n        if application \"Spotify\" is running then\n            tell application \"Spotify\"\n                set playerData to {\"Spotify\", artist of current track, name of current track, player state}\n            end tell\n        else if application \"Music\" is running then\n        \ttell application \"Music\"\n                set playerData to {\"Music\", artist of current track, name of current track, player state}\n            end tell\n        else\n            set playerData to {\"none\", \"none\", \"none\", \"none\"}\n        end if\n\n        if (application \"Google Chrome\" is running) and (exists (front window of application \"Google Chrome\")) then \n            tell application \"Google Chrome\"\n                set browserData to {\"Chrome\", title of active tab of front window}\n            end tell\n        else if (application \"Safari\" is running) and (exists (front window of application \"Safari\")) then\n            tell application \"Safari\"\n                set browserData to {\"Safari\", name of current tab of front window}\n            end tell\n        else\n            set browserData to {\"none\", \"none\"}\n        end if\n\n        set currentData to {playerData, browserData}\n        return currentData\n    end run\n    '''\n    return osascript.run(applescript, background=False)\n\n\ndef processBrowserData(browser_data):\n    browser_artist = browser_song = \"\"\n    # Check that tab is a Youtube video\n    if \" - YouTube\" in browser_data[1]:\n        # Remove  \"Youtube\" from title\n        browser_data[1] = browser_data[1][0:-10]\n        # Check for music video\n        if \" - \" in browser_data[1]:\n            # Music video likely. Parse for Artist\/Song\n            browser_artist = re.search(\n                r'^([^\\-]+)', browser_data[1]).group(0).strip().lower()\n            browser_song = re.search(\n                r'([^\\-]+)$', browser_data[1]).group(0).strip().lower()\n            browser_state = 'playing'\n        else:\n            # Music video not likely\n            browser_state = 'paused'\n    else:\n        # Not a Youtube video page\n        browser_state = 'paused'\n    return browser_data[0], browser_artist, browser_song, browser_state\n\n\ndef processPlayerData(player_data):\n    player_type = player_data[0]\n    # Recombine artist or title that may have been split up if commas in title\n    player_data = normalizeCommas(player_type, player_data)\n    player_artist = player_data[1].lower()\n    player_song = player_data[2].lower()\n    player_state = player_data[3].lower()\n    return player_type, player_artist, player_song, player_state\n\n\ndef playerOrBrowser(player_type, player_state, browser_type, browser_state):\n    if player_state == \"playing\":\n        return \"player\"\n    elif browser_state == \"playing\":\n        return \"browser\"\n    else:\n        return\n\n\ndef normalizeCommas(engine, player_data):\n    while len(player_data) > 5:\n        if engine == 'Music':                 # Music: Combine artists split by comma\n            player_data[1] = player_data[1] + ', ' + player_data[2]\n            player_data.pop(2)\n        else:                                       # Spotify: Combine songs split by comma\n            player_data[2] = player_data[2] + ', ' + player_data[3]\n            player_data.pop(3)\n    return player_data\n\n\ndef cleanSong(songtitle):\n    # Remove everything after dash\n    songtitle = re.sub(r' -.*$', '', songtitle)\n    songtitle = re.sub(r' \\(.*\\)', '', songtitle)   # Remove parentheses\n    songtitle = re.sub(r' \\[.*\\]', '', songtitle)   # Remove brackets\n    return songtitle\n\n\ndef multipleArtistCheck(artist):\n    if '&' in artist:\n        artist_1 = re.sub(r' \\&.*$', '', artist)\n        artist_2 = re.sub(r'^.*\\& ', '', artist)\n    else:\n        artist_1 = 'n\/a'\n        artist_2 = 'n\/a'\n    return artist_1, artist_2\n\n\ndef parseAndFormat(url):\n    source_soup = BeautifulSoup(requests.get(\n        url).text, 'html.parser')  # Parse HTML\n    # Get text from the lyrics <div>\n    lyricstext = source_soup.find('div', class_='lyrics').get_text()\n    # Remove song sections in brackets\n    lyricstext = re.sub(r'\\[.*\\n*.*\\]', '', lyricstext).strip()\n    # Remove parentheticals\n    lyricstext = re.sub(r'\\(.*\\n*.*\\)', '', lyricstext).strip()\n    while '\\n\\n' in lyricstext:                                         # Line breaks, flatten, and replace\n        lyricstext = lyricstext.replace('\\n\\n', '\\n')\n    lyricstext = lyricstext.replace('\\n', ', ').replace('?,', '?').replace('!,', '!').replace(' ,', ',').replace(\n        ' .', '.').replace('.,', '.').replace(',.', '.').replace('...', '..').replace('...', '..').replace('  ', ' ')\n    return lyricstext\n\n\ndef printWisdom(player_song):\n    wisdom = [\n        '\\\"Music expresses that which cannot be said and on which it is impossible to be silent.\\\" - Victor Hugo ',\n        '\\\"If music be the food of love, play on.\\\" - William Shakespeare ',\n        '\\\"Where words fail, music speaks.\\\" - Hans Christian Anderson ',\n        '\\\"One good thing about music, when it hits you, you feel no pain.\\\" - Bob Marley ',\n        '\\\"And those who were seen dancing were thought to be insane by those who could not hear the music.\\\" - Nietzsche ',\n        '\\\"There is geometry in the humming of the strings, there is music in the spacing of the spheres.\\\" - Pythagoras ',\n        '\\\"You are the music while the music lasts.\\\" - T. S. Eliot ',\n        '\\\"After silence, that which comes nearest to expressing the inexpressible is music.\\\" - Aldous Huxley '\n    ]\n    # Hash songname for constant quote when script refires\n    songhash = hashlib.sha224(player_song.encode('utf-8')).hexdigest()\n    songhash_int = int(songhash, base=16)\n    # Reduce hash to within array length\n    print(wisdom[(songhash_int % (len(wisdom) + 1)) - 1])\n\n\nif __name__ == '__main__':\n    main()\n",
      "BTTTouchBarButtonName": "Kashi",
      "BTTTouchBarHideWhenNoPlayer": false,
      "BTTTouchBarButtonFontSize": 0,
      "BTTTouchBarFontColor": "254.881188, 252.030672, 120.527085, 255.000000",
      "BTTTouchBarButtonCornerRadius": 6,
      "BTTTouchBarItemPadding": 0
    }
  }
]